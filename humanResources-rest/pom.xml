<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.humanresources</groupId>
        <artifactId>humanresources-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

    <groupId>org.humanresources</groupId>
    <artifactId>humanResources-rest</artifactId>
    <name>humanResources-rest</name>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>war</packaging>

    <!--parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.2.2.RELEASE</version>
    </parent -->

    <properties>
        <!-- The main class to start by executing java -jar -->
        <start-class>com.rs.web.Application</start-class>
        <!-- embedded.tomcat.scope>provided</embedded.tomcat.scope -->
        <!-- embedded.tomcat.scope>compile</embedded.tomcat.scope -->
        <!--<tomcat.version>7.0.59</tomcat.version>-->
        <!-- tomcat.version>8.5.27</tomcat.version -->
        <tomcat.version>9.0.17</tomcat.version><!--  does not work for spring boot 1.3.3-->
        <!--hsqldb-version>2.3.2</hsqldb-version>
        <h2-version>1.4.186</h2-version -->
        <powermock.version>1.6.2</powermock.version>

        <logback.version>1.2.3</logback.version>
        <jcloverslf4j.version>1.7.26</jcloverslf4j.version>
        <war.suffix></war.suffix>
        <files.to.exclude.from.rsapp20-jsonrpc></files.to.exclude.from.rsapp20-jsonrpc>

    </properties>


    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
            <exclusions>
            	<exclusion>
            		<artifactId>tomcat-embed-core</artifactId>
            		<groupId>org.apache.tomcat.embed</groupId>
            	</exclusion>
            	<exclusion>
            		<artifactId>tomcat-embed-el</artifactId>
            		<groupId>org.apache.tomcat.embed</groupId>
            	</exclusion>
            	<exclusion>
            		<artifactId>tomcat-embed-logging-juli</artifactId>
            		<groupId>org.apache.tomcat.embed</groupId>
            	</exclusion>
            	<exclusion>
            		<artifactId>tomcat-embed-websocket</artifactId>
            		<groupId>org.apache.tomcat.embed</groupId>
            	</exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
				<exclusion>
                	<groupId>org.springframework.boot</groupId>
            		<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.tomcat</groupId>
					<artifactId>tomcat-jdbc</artifactId>
				</exclusion>
			</exclusions>
			<scope>${embedded.tomcat.scope}</scope>
		</dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- Begin Embedded Tomcat dependencies
         Just for development, since scope is "provided",
         these jar files will not be added to the final war -->

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <!-- dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-logging-juli</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency -->

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-el</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jasper</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jasper-el</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jsp-api</artifactId>
            <version>${tomcat.version}</version>
            <scope>${embedded.tomcat.scope}</scope>
        </dependency>

        <!-- End Embedded Tomcat dependencies -->

        <!-- dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency -->


        <!-- jsonrpc4j -->
        <dependency>
            <groupId>com.github.briandilley.jsonrpc4j</groupId>
            <artifactId>jsonrpc4j</artifactId>
            <version>1.1</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-validator</groupId>
            <artifactId>commons-validator</artifactId>
            <version>1.4.1</version>
        </dependency>

        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>1.2.3</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>net.javacrumbs.json-unit</groupId>
            <artifactId>json-unit-fluent</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Embedded Database for in-memory testing -->
        <!--dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>${hsqldb-version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2-version}</version>
        </dependency -->

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.0</version>
            <exclusions>
                <exclusion>  <!-- declare the exclusion here -->
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.1</version>
        </dependency>

        <!-- For tests-->

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4-rule</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-classloading-xstream</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>de.saly</groupId>
            <artifactId>javamail-mock2-fullmock</artifactId>
            <version>0.5-beta4</version>
            <scope>test</scope>
        </dependency>


        <!-- LogBack dependencies -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${jcloverslf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.humanresources</groupId>
            <artifactId>humanResources-core</artifactId>
            <version>${humanresources-core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.humanresources</groupId>
            <artifactId>humanResources-core</artifactId>
            <version>${humanresources-core.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5</version>
        </dependency>

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.9</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
            <type>jar</type>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>

    </dependencies>


    <build>

        <finalName>${project.artifactId}${war.suffix}</finalName>

        <plugins>

            <plugin>
                <!--
                    If you’re using the Spring Boot build tools, marking the embedded servlet container dependency as provided
                    will produce an executable war file with the provided dependencies packaged in a lib-provided directory.
                     This means that, in addition to being deployable to a servlet container,
                     you can also run your application using java -jar on the command line.
                 -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <!--
                This configuration will repackage a jar or war that is built during the package phase of the Maven lifecycle
                -->
            </plugin>

            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <!-- packagingExcludes to externalize specific environment settings  -->
                    <packagingExcludes>
                        ${files.to.exclude.from.rsapp20-jsonrpc}
                    </packagingExcludes>
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>


            <plugin>
                <!-- The Surefire Plugin is designed to run unit tests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <!--forkCount=1/reuseForks=false executes each test class in its own JVM process, one after another.
                     It creates the highest level of separation for the test execution,
                    but it would probably also give you the longest execution time of all the available options. Consider it as a last resort. -->
                    <!--<forkCount>1</forkCount>-->
                    <!--<reuseForks>false</reuseForks> &lt;!&ndash; parallel tests executions disabled&ndash;&gt;-->
<!--                    <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine> -->
                    <argLine>-Xmx512m -XX:MaxPermSize=256m</argLine>
                    <systemPropertyVariables>
                        <!--<spring.profiles.active>integrationTest,ranchSystems</spring.profiles.active>-->
                        <spring.profiles.active>integrationTest,reinke</spring.profiles.active>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <!-- The Failsafe Plugin is designed to run integration tests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <systemPropertyVariables>
                        <!--<spring.profiles.active>integrationTest,ranchSystems</spring.profiles.active>-->
                        <spring.profiles.active>integrationTest,reinke</spring.profiles.active>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin -->


        </plugins>
    </build>

</project>
